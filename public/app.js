// Ïñ∏Ïñ¥ ÏÑ§Ï†ï
let currentLanguage = 'ko';

const translations = {
  ko: {
    title: 'üçΩÔ∏è ÌïúÏãùÎãπ Ï£ºÎ¨∏ ÌÇ§Ïò§Ïä§ÌÅ¨',
    cart: 'üõí Ïû•Î∞îÍµ¨Îãà',
    empty: 'üßπ ÎπÑÏö∞Í∏∞',
    payment: 'üí≥ Í≤∞Ï†ú',
    orderComplete: 'üéâ Ï£ºÎ¨∏ ÏôÑÎ£å!',
    totalItems: 'Ï¥ù {count}Í∞ú',
    totalAmount: 'üí∞ Ï¥ù {amount}Ïõê',
    cartEmpty: 'üõí Ïû•Î∞îÍµ¨ÎãàÍ∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§',
    noRestaurants: 'üè™ Îì±Î°ùÎêú ÏãùÎãπÏù¥ ÏóÜÏäµÎãàÎã§',
    loadingMenu: 'Î©îÎâ¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...',
    noMenus: 'üìã Î©îÎâ¥Í∞Ä ÏóÜÏäµÎãàÎã§',
    backToRestaurants: 'üè† ÏãùÎãπ ÏÑ†ÌÉùÏúºÎ°ú',
    orderConfirm: 'üìã Ï£ºÎ¨∏ ÌôïÏù∏',
    addToCart: 'üõí Ïû•Î∞îÍµ¨Îãà Îã¥Í∏∞',
    cancel: '‚ùå Ï∑®ÏÜå',
    addedToCart: 'üõí Ïû•Î∞îÍµ¨Îãà Îã¥Í∏∞ ÏôÑÎ£å',
    addMore: '‚ûï Îçî Îã¥Í∏∞',
    payNow: 'üí≥ Í≤∞Ï†úÌïòÍ∏∞',
    viewOtherRestaurants: 'üè† Îã§Î•∏ ÏãùÎãπ Î≥¥Í∏∞',
    selectPayment: 'üí∞ Í≤∞Ï†ú Î∞©Î≤ï ÏÑ†ÌÉù',
    cash: 'üíµ ÌòÑÍ∏à',
    card: 'üí≥ Ïπ¥Îìú',
    callStaff: 'Ï†êÏõêÏùÑ Ìò∏Ï∂úÌï¥Ï£ºÏÑ∏Ïöî',
    enterPassword: 'üîê ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• ÌõÑ Í≤∞Ï†úÎ•º ÏôÑÎ£åÌï† Ïàò ÏûàÏäµÎãàÎã§',
    passwordPlaceholder: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•',
    confirm: 'ÌôïÏù∏',
    cashPaymentComplete: 'üéâ ÌòÑÍ∏à Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!',
    cardPaymentComplete: 'üéâ Ïπ¥Îìú Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!',
    paymentAmount: 'üí∞ Í≤∞Ï†úÍ∏àÏï°: {amount}Ïõê',
    autoReset: '‚è≥ 10Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§...',
    wrongPassword: '‚ùå ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÌãÄÎ†∏ÏäµÎãàÎã§',
    enterCardInfo: 'üí≥ Ïπ¥Îìú Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî',
    paymentAmountLabel: 'üìä Í≤∞Ï†úÍ∏àÏï°: {amount}Ïõê',
    payButton: 'üí≥ Í≤∞Ï†úÌïòÍ∏∞',
    home: 'üè† Ï≤òÏùåÏúºÎ°ú',
    orderMore: 'üçΩÔ∏èÎçî Ï£ºÎ¨∏ÌïòÍ∏∞'
  },
  en: {
    title: 'üçΩÔ∏è Korean Restaurant Order Kiosk',
    cart: 'üõí Cart',
    empty: 'üßπ Clear',
    payment: 'üí≥ Pay',
    orderComplete: 'üéâ Order Complete!',
    totalItems: 'Total {count} items',
    totalAmount: 'üí∞ Total ${amount}',
    cartEmpty: 'üõí Cart is empty',
    noRestaurants: 'üè™ No restaurants registered',
    loadingMenu: 'Loading menu...',
    noMenus: 'üìã No menus available',
    backToRestaurants: 'üè† Back to restaurants',
    orderConfirm: 'üìã Order Confirmation',
    addToCart: 'üõí Add to Cart',
    cancel: '‚ùå Cancel',
    addedToCart: 'üõí Added to Cart',
    addMore: '‚ûï Add More',
    payNow: 'üí≥ Pay Now',
    viewOtherRestaurants: 'üè† View Other Restaurants',
    selectPayment: 'üí∞ Select Payment Method',
    cash: 'üíµ Cash',
    card: 'üí≥ Card',
    callStaff: 'Please call staff',
    enterPassword: 'üîê Enter password to complete payment',
    passwordPlaceholder: 'Enter password',
    confirm: 'Confirm',
    cashPaymentComplete: 'üéâ Cash payment completed!',
    cardPaymentComplete: 'üéâ Card payment completed!',
    paymentAmount: 'üí∞ Payment amount: ${amount}',
    autoReset: '‚è≥ Auto reset in 10 seconds...',
    wrongPassword: '‚ùå Wrong password',
    enterCardInfo: 'üí≥ Please enter card information',
    paymentAmountLabel: 'üìä Payment amount: ${amount}',
    payButton: 'üí≥ Pay',
    home: 'üè† Home',
    orderMore: 'üçΩÔ∏è Order More'
  }
};

function t(key, params = {}) {
  let text = translations[currentLanguage][key] || key;
  Object.keys(params).forEach(param => {
    text = text.replace(`{${param}}`, params[param]);
  });
  return text;
}

function switchLanguage(lang) {
  currentLanguage = lang;
  document.querySelector('.language-btn.active')?.classList.remove('active');
  document.querySelector(`[onclick="switchLanguage('${lang}')"]`).classList.add('active');
  
  // ÌéòÏù¥ÏßÄ Îã§Ïãú Î°úÎìú
  loadRestaurants();
  updateCartUI();
  result.innerHTML = '';
  
  // Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏
  document.querySelector('h1').textContent = t('title');
  document.querySelector('#cart-box h2').textContent = t('cart');
  
  // ‚úÖ Ïû•Î∞îÍµ¨Îãà Î≤ÑÌäºÎì§ ÏóÖÎç∞Ïù¥Ìä∏ Ï∂îÍ∞Ä
  const cartButtons = document.querySelector('.cart-buttons');
  if (cartButtons) {
    cartButtons.innerHTML = `
      <button class="danger-btn cart-btn" onclick="clearCart()">${t('empty')}</button>
      <button class="success-btn cart-btn" onclick="confirmPayment()">${t('payment')}</button>
    `;
  }
}

// ÌÇ§Ïò§Ïä§ÌÅ¨ Ïä§ÌÉÄÏùº Ï†ÅÏö© (Ïó∞Ìïú Ï£ºÌô©ÏÉâ Î∞∞Í≤Ω)
document.body.style.background = "linear-gradient(135deg, #FFE4B5, #FFDAB9, #FFCCCB)";
document.body.style.color = "#333";
document.body.style.fontSize = "1.2rem";
document.body.style.textAlign = "center";
document.body.style.paddingTop = "30px";
document.body.style.fontFamily = "'Arial', sans-serif";
document.body.style.minHeight = "100vh";
document.body.style.margin = "0";
document.body.style.padding = "20px";
// CSS Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
const style = document.createElement('style');
style.textContent = `
 * {
   box-sizing: border-box;
 }

 h1 {
   font-size: 3rem;
   margin-bottom: 30px;
   text-shadow: 0 4px 8px rgba(0,0,0,0.3);
   background: linear-gradient(45deg, #FF6B35, #FF8C42);
   -webkit-background-clip: text;
   -webkit-text-fill-color: transparent;
   background-clip: text;
   animation: glow 2s ease-in-out infinite alternate;
 }

 @keyframes glow {
   from { filter: drop-shadow(0 0 10px rgba(255,107,53,0.5)); }
   to { filter: drop-shadow(0 0 20px rgba(255,107,53,0.8)); }
 }

 .language-selector {
   position: fixed;
   top: 20px;
   right: 20px;
   display: flex;
   gap: 10px;
   z-index: 1000;
 }

 .language-btn {
   background: rgba(255,255,255,0.9);
   color: #FF6B35;
   border: 2px solid #FF6B35;
   padding: 8px 16px;
   border-radius: 20px;
   cursor: pointer;
   font-weight: bold;
   transition: all 0.3s ease;
 }

 .language-btn:hover {
   background: #FF6B35;
   color: white;
 }

 .language-btn.active {
   background: #FF6B35;
   color: white;
 }

 .main-container {
   display: flex;
   gap: 30px;
   align-items: flex-start;
   max-width: 1400px;
   margin: 0 auto;
 }

 #restaurants {
   flex: 2;
   display: flex;
   flex-wrap: wrap;
   gap: 20px;
   justify-content: center;
   margin-bottom: 40px;
   padding: 0 20px;
 }

 #cart-box {
   flex: 1;
   background: rgba(255, 255, 255, 0.95);
   color: #333;
   padding: 25px;
   border-radius: 20px;
   min-width: 300px;
   max-width: 400px;
   box-shadow: 0 10px 30px rgba(0,0,0,0.2);
   border: 2px solid rgba(255,107,53,0.3);
   backdrop-filter: blur(10px);
   position: sticky;
   top: 20px;
 }

 #cart-box h2 {
   font-size: 1.8rem;
   margin-bottom: 20px;
   color: #FF6B35;
   text-shadow: none;
   background: none;
   -webkit-text-fill-color: initial;
 }

 button {
   background: linear-gradient(45deg, #FF8C42, #FF6B35);
   border: none;
   color: white;
   padding: 20px 40px;
   font-size: 1.5rem;
   font-weight: bold;
   border-radius: 15px;
   cursor: pointer;
   box-shadow: 0 8px 15px rgba(0,0,0,0.2);
   transition: all 0.3s ease;
   position: relative;
   overflow: hidden;
   min-width: 150px;
 }

 button::before {
   content: '';
   position: absolute;
   top: 0;
   left: -100%;
   width: 100%;
   height: 100%;
   background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
   transition: left 0.5s;
   z-index: 1;
 }

 button:hover::before {
   left: 100%;
 }

 button:hover {
   transform: translateY(-3px);
   box-shadow: 0 12px 25px rgba(0,0,0,0.3);
   background: linear-gradient(45deg, #FF7A33, #FF5722);
 }

 button:active {
   transform: translateY(0);
   box-shadow: 0 5px 10px rgba(0,0,0,0.2);
 }

 .success-btn {
   background: linear-gradient(45deg, #4CAF50, #45a049) !important;
 }

 .success-btn:hover {
   background: linear-gradient(45deg, #45a049, #3d8b40) !important;
 }

 .danger-btn {
   background: linear-gradient(45deg, #f44336, #d32f2f) !important;
 }

 .danger-btn:hover {
   background: linear-gradient(45deg, #d32f2f, #b71c1c) !important;
 }

 .info-btn {
   background: linear-gradient(45deg, #2196F3, #1976D2) !important;
 }

 .info-btn:hover {
   background: linear-gradient(45deg, #1976D2, #1565C0) !important;
 }

 .cart-btn {
   padding: 8px 15px !important;
   font-size: 1rem !important;
   min-width: auto !important;
   margin: 5px 0;
 }
`;
document.head.appendChild(style);
// Ï∂îÍ∞Ä CSS Ïä§ÌÉÄÏùº Í≥ÑÏÜç
const additionalStyle = document.createElement('style');
additionalStyle.textContent = `
 #result {
   background: rgba(255,255,255,0.1);
   backdrop-filter: blur(10px);
   border-radius: 20px;
   padding: 30px;
   margin: 30px auto;
   box-shadow: 0 10px 30px rgba(0,0,0,0.2);
   border: 1px solid rgba(255,255,255,0.2);
   max-width: 600px;
   min-height: 100px;
 }

 #result h2 {
   font-size: 2rem;
   margin-bottom: 20px;
   color: #333;
   text-shadow: 0 2px 4px rgba(0,0,0,0.3);
 }

 #result div {
   font-size: 1.3rem;
   margin: 15px 0;
   line-height: 1.5;
 }

 #result img {
   border-radius: 15px;
   box-shadow: 0 8px 20px rgba(0,0,0,0.3);
   transition: transform 0.3s ease;
   margin-top: 20px;
 }

 #result img:hover {
   transform: scale(1.05);
 }

 .loading {
   display: inline-block;
   animation: spin 1s linear infinite;
   font-size: 2rem;
 }

 @keyframes spin {
   0% { transform: rotate(0deg); }
   100% { transform: rotate(360deg); }
 }

 .order-complete {
   background: linear-gradient(45deg, #4CAF50, #45a049);
   border-radius: 15px;
   padding: 25px;
   margin: 20px 0;
   box-shadow: 0 5px 15px rgba(0,0,0,0.2);
   color: white;
 }

 .price-tag {
   background: linear-gradient(45deg, #FF6B35, #FF8C42);
   display: inline-block;
   padding: 12px 25px;
   border-radius: 25px;
   font-weight: bold;
   font-size: 1.4rem;
   margin: 15px 0;
   box-shadow: 0 4px 10px rgba(0,0,0,0.2);
   color: white;
 }

 .menu-grid {
   display: grid;
   grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
   gap: 20px;
   margin-top: 25px;
 }

 .confirm-dialog {
   background: rgba(255,255,255,0.9);
   color: #333;
   border-radius: 20px;
   padding: 30px;
   border: 2px solid rgba(255,107,53,0.3);
 }

 .status-message {
   font-size: 1.4rem;
   padding: 20px;
   border-radius: 15px;
   background: rgba(255,255,255,0.1);
   border-left: 5px solid #FF6B35;
   margin: 20px 0;
 }

 .error-message {
   background: rgba(244, 67, 54, 0.2);
   border-left-color: #f44336;
 }

 .button-group {
   display: flex;
   gap: 15px;
   justify-content: center;
   flex-wrap: wrap;
   margin-top: 20px;
 }

 .cart-item {
   margin-bottom: 15px;
   background: rgba(255, 165, 0, 0.1);
   padding: 15px;
   border-radius: 12px;
   border-left: 4px solid #FF6B35;
   display: flex;
   justify-content: space-between;
   align-items: center;
 }

 .cart-item-info {
   flex: 1;
   text-align: left;
 }

 .cart-item-name {
   font-weight: bold;
   color: #333;
   font-size: 1.1rem;
 }

 .cart-item-price {
   color: #FF6B35;
   font-weight: bold;
   margin-top: 5px;
 }

 .cart-total {
   background: linear-gradient(45deg, #FF6B35, #FF8C42);
   color: white;
   padding: 15px;
   border-radius: 12px;
   margin: 20px 0;
   font-weight: bold;
   font-size: 1.3rem;
 }

 .cart-buttons {
   display: flex;
   gap: 10px;
   margin-top: 20px;
 }

 .cart-buttons button {
   flex: 1;
   padding: 12px;
   font-size: 1rem;
 }

 @media (max-width: 1024px) {
   .main-container {
     flex-direction: column;
   }
   
   #cart-box {
     position: static;
     max-width: none;
     margin-top: 20px;
   }
 }

 @media (max-width: 768px) {
   h1 {
     font-size: 2.5rem;
   }
   
   button {
     padding: 15px 25px;
     font-size: 1.2rem;
     min-width: 120px;
   }
   
   #result {
     margin: 20px 10px;
     padding: 20px;
   }
   
   .menu-grid {
     grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
     gap: 15px;
   }
   
   .main-container {
     gap: 20px;
   }
   
   #cart-box {
     min-width: auto;
     padding: 20px;
   }
   
   .language-selector {
     position: static;
     justify-content: center;
     margin-bottom: 20px;
   }
 }
`;
document.head.appendChild(additionalStyle);

// body Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï (Ïñ∏Ïñ¥ ÏÑ†ÌÉùÍ∏∞ Î∞è Ïû•Î∞îÍµ¨Îãà ÏòÅÏó≠ Ìè¨Ìï®)
document.body.innerHTML = `
 <div class="language-selector">
   <button class="language-btn active" onclick="switchLanguage('ko')">ÌïúÍµ≠Ïñ¥</button>
   <button class="language-btn" onclick="switchLanguage('en')">English</button>
 </div>
 <h1>${t('title')}</h1>
 <div class="main-container">
   <div style="flex: 2;">
     <div id="restaurants"></div>
   </div>
   <div id="cart-box">
     <h2>${t('cart')}</h2>
     <div id="cart-items"></div>
     <div id="cart-total"></div>
     <div class="cart-buttons">
       <button class="danger-btn cart-btn" onclick="clearCart()">${t('empty')}</button>
       <button class="success-btn cart-btn" onclick="confirmPayment()">${t('payment')}</button>
     </div>
   </div>
 </div>
`;

const result = document.createElement('div');
result.id = 'result';
document.body.appendChild(result);

// ‚úÖ menu ‚Üí menuId Îß§Ìïë Í∞ùÏ≤¥ Ï†ïÏùò
const reverseClassIndices = {
  'Í∞ÄÏßÄÎ≥∂Ïùå': 0,
  'Í∞ÑÏû•Í≤åÏû•': 1,
  'Í∞àÎπÑÌÉï': 2,
  'Í∞àÏπòÍµ¨Ïù¥': 3,
  'Í∞êÏûêÏ°∞Î¶º': 4,
  'Í∞êÏûêÏ±ÑÎ≥∂Ïùå': 5,
  'Í∞êÏûêÌÉï': 6,
  'Í∞ìÍπÄÏπò': 7,
  'Í±¥ÏÉàÏö∞Î≥∂Ïùå': 8,
  'Í≤ΩÎã®': 9,
  'Í≥ÑÎûÄÍµ≠': 10,
  'Í≥ÑÎûÄÎßêÏù¥': 11,
  'Í≥ÑÎûÄÏ∞ú': 12,
  'Í≥†Îì±Ïñ¥Íµ¨Ïù¥': 13,
  'Í≥†ÏÇ¨Î¶¨ÎÇòÎ¨º': 14,
  'Í≥†Ï∂îÌäÄÍπÄ': 15,
  'Í≥∞ÌÉï_ÏÑ§Î†ÅÌÉï': 16,
  'Í≥±Ï∞ΩÍµ¨Ïù¥': 17,
  'Í≥ºÎ©îÍ∏∞': 18,
  'ÍπÄÎ∞•': 19,
  'ÍπÄÏπòÎ≥∂ÏùåÎ∞•': 20,
  'ÍπÄÏπòÏ†Ñ': 21,
  'ÍπÄÏπòÏ∞åÍ∞ú': 22,
  'ÍπçÎëêÍ∏∞': 23,
  'ÍπªÏûéÏû•ÏïÑÏ∞å': 24,
  'Íº¨ÎßâÏ∞ú': 25,
  'ÍΩàÎ¶¨Í≥†Ï∂îÎ¨¥Ïπ®': 26,
  'ÍøÄÎñ°': 27,
  'ÎÇòÎ∞ïÍπÄÏπò': 28,
  'ÎàÑÎ£ΩÏßÄ': 29,
  'Îã≠Í∞àÎπÑ': 30,
  'ÎèÑÌÜ†Î¶¨Î¨µ': 31,
  'ÎèôÍ∑∏ÎûëÎï°': 32,
  'ÎêúÏû•Ï∞åÍ∞ú': 33,
  'ÎëêÎ∂ÄÍπÄÏπò': 34,
  'ÎëêÎ∂ÄÏ°∞Î¶º': 35,
  'ÎïÖÏΩ©Ï°∞Î¶º': 36,
  'Îñ°Í∞àÎπÑ': 37,
  'Îñ°Íµ≠_ÎßåÎëêÍµ≠': 38,
  'Îñ°Íº¨Ïπò': 39,
  'Îñ°Î≥∂Ïù¥': 40,
  'ÎùºÎ©¥': 41,
  'ÎùºÎ≥∂Ïù¥': 42,
  'ÎßâÍµ≠Ïàò': 43,
  'ÎßåÎëê': 44,
  'Î©çÍ≤å': 45,
  'Î©îÏ∂îÎ¶¨ÏïåÏû•Ï°∞Î¶º': 46,
  'Î©∏ÏπòÎ≥∂Ïùå': 47,
  'Î¨¥Íµ≠': 48,
  'Î¨¥ÏÉùÏ±Ñ': 49,
  'Î¨ºÎÉâÎ©¥': 50,
  'Î¨ºÌöå': 51,
  'ÎØ∏Ïó≠Íµ≠': 52,
  'ÎØ∏Ïó≠Ï§ÑÍ∏∞Î≥∂Ïùå': 53,
  'Î∞∞Ï∂îÍπÄÏπò': 54,
  'Î∞±ÍπÄÏπò': 55,
  'Î≥¥Ïåà': 56,
  'Î∂ÄÏ∂îÍπÄÏπò': 57,
  'Î∂àÍ≥†Í∏∞': 58,
  'ÎπÑÎπîÎÉâÎ©¥': 59,
  'ÎπÑÎπîÎ∞•': 60,
  'ÏÇ∞ÎÇôÏßÄ': 61,
  'ÏÇºÍ≤πÏÇ¥': 62,
  'ÏÇºÍ≥ÑÌÉï': 63,
  'ÏÉàÏö∞Î≥∂ÏùåÎ∞•': 64,
  'ÏÉàÏö∞ÌäÄÍπÄ': 65,
  'ÏÉùÏÑ†Ï°∞Î¶º': 66,
  'ÏÜåÏÑ∏ÏßÄÎ≥∂Ïùå': 67,
  'ÏÜ°Ìé∏': 68,
  'ÏàòÏ†ïÍ≥º': 69,
  'ÏàôÏ£ºÎÇòÎ¨º': 70,
  'ÏàúÎåÄ': 71,
  'ÏàúÎëêÎ∂ÄÏ∞åÍ∞ú': 72,
  'ÏãúÍ∏àÏπòÎÇòÎ¨º': 73,
  'ÏãúÎûòÍ∏∞Íµ≠': 74,
  'ÏãùÌòú': 75,
  'Ïï†Ìò∏Î∞ïÎ≥∂Ïùå': 76,
  'ÏïΩÍ≥º': 77,
  'ÏïΩÏãù': 78,
  'ÏñëÎÖêÍ≤åÏû•': 79,
  'ÏñëÎÖêÏπòÌÇ®': 80,
  'Ïñ¥Î¨µÎ≥∂Ïùå': 81,
  'Ïó∞Í∑ºÏ°∞Î¶º': 82,
  'Ïó¥Î¨¥Íµ≠Ïàò': 83,
  'Ïó¥Î¨¥ÍπÄÏπò': 84,
  'Ïò§Ïù¥ÏÜåÎ∞ïÏù¥': 85,
  'Ïò§ÏßïÏñ¥Ï±ÑÎ≥∂Ïùå': 86,
  'Ïö∞ÏóâÏ°∞Î¶º': 87,
  'Ïú†Î∂ÄÏ¥àÎ∞•': 88,
  'Ïú°Í∞úÏû•': 89,
  'Ïú°Ìöå': 90,
  'ÏûîÏπòÍµ≠Ïàò': 91,
  'Ïû°Í≥°Î∞•': 92,
  'Ïû°Ï±Ñ': 93,
  'Ïû•Ïñ¥Íµ¨Ïù¥': 94,
  'Ïû•Ï°∞Î¶º': 95,
  'Ï†ÑÎ≥µÏ£Ω': 96,
  'Ï†úÏú°Î≥∂Ïùå': 97,
  'Ï°∞Í∞úÍµ¨Ïù¥': 98,
  'Ï°∞Í∏∞Íµ¨Ïù¥': 99,
  'Ï°±Î∞ú': 100,
  'Ï£ºÍæ∏ÎØ∏Î≥∂Ïùå': 101,
  'ÏßúÏû•Î©¥': 102,
  'Ïß¨ÎΩï': 103,
  'Ï´ÑÎ©¥': 104,
  'Ï∞úÎã≠': 105,
  'Ï¥ùÍ∞ÅÍπÄÏπò': 106,
  'Ï∂îÏñ¥ÌÉï': 107,
  'ÏπºÍµ≠Ïàò': 108,
  'ÏΩ©Íµ≠Ïàò': 109,
  'ÏΩ©ÎÇòÎ¨ºÍµ≠': 110,
  'ÏΩ©ÎÇòÎ¨ºÎ¨¥Ïπ®': 111,
  'ÏΩ©ÏûêÎ∞ò': 112,
  'ÌååÍπÄÏπò': 113,
  'ÌååÏ†Ñ': 114,
  'ÌîºÏûê': 115,
  'ÌïúÍ≥º': 116,
  'Ìï¥Î¨ºÏ∞ú': 117,
  'Ìò∏Î∞ïÏ†Ñ': 118,
  'Ìò∏Î∞ïÏ£Ω': 119,
  'Ìô©ÌÉúÍµ¨Ïù¥': 120,
  'ÌõÑÎùºÏù¥ÎìúÏπòÌÇ®': 121,
  'ÌõàÏ†úÏò§Î¶¨': 122
};


// Ï†ÑÏó≠ Î≥ÄÏàò
let cart = [];
const sessionId = `sess_${Math.random().toString(36).substring(2, 12)}`;
// Ïû•Î∞îÍµ¨Îãà UI ÏóÖÎç∞Ïù¥Ìä∏
async function updateCartUI() {
 try {
   const res = await fetch(`/api/cart/${sessionId}`);
   const items = await res.json();
   cart = items;
   
   const container = document.getElementById("cart-items");
   const totalContainer = document.getElementById("cart-total");
   
   if (!items.length) {
     container.innerHTML = `<div class="status-message" style="background: rgba(255,165,0,0.1); color: #666;">${t('cartEmpty')}</div>`;
     totalContainer.innerHTML = '';
     return;
   }
   
   const totalPrice = items.reduce((sum, item) => sum + (item.price || 1000), 0);
   
   container.innerHTML = items.map(item => `
     <div class="cart-item">
       <div class="cart-item-info">
         <div class="cart-item-name">üçΩÔ∏è ${item.menu}</div>
         <div class="cart-item-price">üí∞ ${(item.price || 1000).toLocaleString()}${currentLanguage === 'ko' ? 'Ïõê' : ''}</div>
       </div>
       <button class="danger-btn cart-btn" onclick="removeCartItem(${item.id})" style="padding: 8px 12px; font-size: 0.9rem; min-width: auto;">
         ‚ùå
       </button>
     </div>
   `).join("");
   
   totalContainer.innerHTML = `
     <div class="cart-total">
       üìä ${t('totalItems', {count: items.length})} | ${t('totalAmount', {amount: totalPrice.toLocaleString()})}
     </div>
   `;
 } catch (e) {
   console.error('Ïû•Î∞îÍµ¨Îãà UI ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', e);
 }
}

// cart ÌÖåÏù¥Î∏îÏùò Í≥†Ïú† idÎ•º Î∞õÏïÑÏÑú ÏÇ≠Ï†ú
async function removeCartItem(cartItemId) {
  try {
    const response = await fetch(`/api/cart/item/${cartItemId}`, { method: 'DELETE' });
    if (!response.ok) {
      const msg = await response.text();
      throw new Error(msg);
    }
    updateCartUI();
  } catch (e) {
    console.error('‚ùå Ïû•Î∞îÍµ¨Îãà Ìï≠Î™© ÏÇ≠Ï†ú Ïã§Ìå®:', e);
  }
}

// Ïû•Î∞îÍµ¨Îãà Ï†ÑÏ≤¥ ÎπÑÏö∞Í∏∞
async function clearCart() {
 try {
   await fetch(`/api/cart/${sessionId}`, { method: 'DELETE' });
   updateCartUI();
 } catch (e) {
   console.error('Ïû•Î∞îÍµ¨Îãà ÎπÑÏö∞Í∏∞ Ïã§Ìå®:', e);
 }
}

// ÏãùÎãπ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
async function loadRestaurants() {
 try {
   const res = await fetch('/api/restaurants');
   const names = await res.json();
   
   const container = document.getElementById('restaurants');
   if (!names.length) {
     container.innerHTML = `<div class="status-message">${t('noRestaurants')}</div>`;
     return;
   }
   
   container.innerHTML = names.map(name => `
     <button onclick="loadMenus('${name}')">
       üè™ ${name}
     </button>
   `).join('');
 } catch (e) {
   console.error('ÏãùÎãπ Î™©Î°ù Î°úÎìú Ïã§Ìå®:', e);
   const container = document.getElementById('restaurants');
   container.innerHTML = `<div class="status-message error-message">‚ùå ${t('noRestaurants')}</div>`;
 }
}

// Î©îÎâ¥ Î∂àÎü¨Ïò§Í∏∞
async function loadMenus(restaurantName) {
 try {
   // Î°úÎî© ÌëúÏãú
   result.innerHTML = `
     <div class="status-message">
       <div class="loading">üîÑ</div>
       <div>${t('loadingMenu')}</div>
     </div>
   `;
   
   const res = await fetch(`/api/menus/${restaurantName}`);
   const menus = await res.json();
   
   if (!menus.length) {
     result.innerHTML = `<div class="status-message">${t('noMenus')}</div>`;
     return;
   }
   
   result.innerHTML = `
  <h2>üçú ${restaurantName} ${currentLanguage === 'ko' ? 'Î©îÎâ¥' : 'Menu'}</h2>
  <div class="menu-grid">
    ${menus.map(m => `
      <div style="text-align: center;">
        ${m.imageUrl ? `<img src="${m.imageUrl}" alt="${m.menu}" style="width:120px; height:120px; object-fit:cover; border-radius:12px; margin-bottom:8px;" />` : ''}
        <div><strong>${m.menu}</strong></div>
        <div style="color:#555;">üí∞ ${m.price?.toLocaleString()}${currentLanguage === 'ko' ? 'Ïõê' : ''}</div>
        <button onclick="confirmOrder('${restaurantName}', ${m.menuId}, '${m.menu}')">
          ‚ûï ${currentLanguage === 'ko' ? 'ÏÑ†ÌÉù' : 'Select'}
        </button>
      </div>
    `).join('')}
  </div>
  <div class="button-group" style="margin-top: 30px;">
    <button class="info-btn" onclick="loadRestaurants(); result.innerHTML='';">
      ${t('backToRestaurants')}
    </button>
  </div>
`;

 } catch (e) {
   console.error('Î©îÎâ¥ Î°úÎìú Ïã§Ìå®:', e);
   result.innerHTML = `<div class="status-message error-message">‚ùå ${t('noMenus')}</div>`;
 }
}

// Ï£ºÎ¨∏ ÌôïÏù∏
function confirmOrder(restaurantName, menuId, menuName) {
 result.innerHTML = `
   <div class="confirm-dialog">
     <h2>${t('orderConfirm')}</h2>
     <div style="font-size: 1.5rem; margin: 20px 0;">
       üçΩÔ∏è <strong>${menuName}</strong>
     </div>
     <div style="font-size: 1.2rem; opacity: 0.9;">
       üìç ${restaurantName}
     </div>
     <div style="margin: 20px 0; font-size: 1.1rem;">
       ${currentLanguage === 'ko' ? 'ÏúÑ Î©îÎâ¥Î•º Ïû•Î∞îÍµ¨ÎãàÏóê Îã¥ÏúºÏãúÍ≤†ÏäµÎãàÍπå?' : 'Would you like to add this menu to your cart?'}
     </div>
     <div class="button-group">
       <button class="success-btn" onclick="sendOrder('${restaurantName}', ${menuId}, '${menuName}')">
         ${t('addToCart')}
       </button>
       <button class="danger-btn" onclick="loadMenus('${restaurantName}')">
         ${t('cancel')}
       </button>
     </div>
   </div>
 `;
}
// Ï£ºÎ¨∏ Ï†ÑÏÜ° + Ïû•Î∞îÍµ¨Îãà Ï†ÄÏû• ÌõÑ UI ÏóÖÎç∞Ïù¥Ìä∏
async function sendOrder(restaurantName, menuId, menuName) {
 try {
   const orderRes = await fetch("/api/order", {
     method: "POST",
     headers: { "Content-Type": "application/json" },
     body: JSON.stringify({ restaurantName, menuId })
   });
   if (!orderRes.ok) throw new Error("Ï£ºÎ¨∏ Ïã§Ìå®");


   result.innerHTML = `
     <div class="confirm-dialog">
       <h2>${t('addedToCart')}</h2>
       <div style="font-size: 1.5rem; margin: 20px 0;">
        üçΩÔ∏è <strong>${menuName}</strong>
      </div>
      <div style="font-size: 1.2rem; opacity: 0.9;">
        üìç ${restaurantName}
      </div>
      <div class="button-group">
        <button class="success-btn" onclick="loadMenus('${restaurantName}')">
          ${t('addMore')}
        </button>
        <button class="info-btn" onclick="loadRestaurants(); result.innerHTML='';">
          ${t('viewOtherRestaurants')}
        </button>
      </div>
    </div>
  `;

} catch (e) {
  console.error('Ï£ºÎ¨∏ Ï†ÑÏÜ° Ïã§Ìå®:', e);
  result.innerHTML = `<div class="status-message error-message">‚ùå ${currentLanguage === 'ko' ? 'Ï£ºÎ¨∏ Ïã§Ìå®' : 'Order failed'}</div>`;
}
}

// ‚úÖ Î≥ÄÍ≤ΩÎêú confirmPayment Ìï®Ïàò (paste.txtÏóê ÎàÑÎùΩÎê®)
async function confirmPayment() {
  if (!cart.length) {
    result.innerHTML = `<div class="status-message">${t('cartEmpty')}</div>`;
    return;
  }

  const totalAmount = cart.reduce((sum, item) => sum + (item.price || 1000), 0);

  result.innerHTML = `
    <div class="confirm-dialog">
      <h2>${t('selectPayment')}</h2>
      <div style="margin: 20px 0; font-size: 1.4rem;">
        ${currentLanguage === 'ko' ? 'Ï¥ù Í≤∞Ï†ú Í∏àÏï°' : 'Total Amount'}: <strong>${totalAmount.toLocaleString()}${currentLanguage === 'ko' ? 'Ïõê' : ''}</strong>
      </div>
      <div class="button-group">
        <button class="success-btn" onclick="handleCashPayment(${totalAmount})">${t('cash')}</button>
        <button class="info-btn" onclick="handleCardPayment(${totalAmount})">${t('card')}</button>
      </div>
    </div>
  `;
}

// ‚úÖ ÌòÑÍ∏à Í≤∞Ï†ú Ï≤òÎ¶¨ (paste.txtÏóê ÎàÑÎùΩÎê®)
function handleCashPayment(totalAmount) {
  result.innerHTML = `
    <div class="confirm-dialog">
      <h2>${t('cash')}</h2>
      <div style="margin: 20px 0; font-size: 1.2rem;">
        ${t('callStaff')}<br/><br/>${t('enterPassword')}
      </div>
      <input type="password" id="cash-secret" placeholder="${t('passwordPlaceholder')}" style="padding:10px; font-size:1.2rem; border-radius:10px;"/>
      <div class="button-group" style="margin-top: 20px;">
        <button class="success-btn" onclick="confirmCashSecret(${totalAmount})">${t('confirm')}</button>
      </div>
    </div>
  `;
}

// ‚úÖ ÌòÑÍ∏à Í≤∞Ï†ú ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏ (paste.txtÏóê ÎàÑÎùΩÎê®)
function confirmCashSecret(totalAmount) {
  const secret = document.getElementById('cash-secret').value;
  if (secret === 'dlwjdgus') {
    result.innerHTML = `
      <div class="order-complete">
        <h2>${t('cashPaymentComplete')}</h2>
        <div style="font-size: 1.2rem; margin: 15px 0;">
          ${t('paymentAmount', {amount: totalAmount.toLocaleString()})}
        </div>
        <div style="font-size: 1rem; opacity: 0.8;">
          ${t('autoReset')}
        </div>
      </div>
    `;
    fetch(`/api/cart/${sessionId}`, { method: 'DELETE' });
    setTimeout(() => {
      cart = [];
      loadRestaurants();
      result.innerHTML = "";
      updateCartUI();
    }, 10000);
  } else {
    alert(t('wrongPassword'));
  }
}

// ‚úÖ Ïπ¥Îìú Í≤∞Ï†ú Ï≤òÎ¶¨ (paste.txtÏóê ÎàÑÎùΩÎê®)
async function handleCardPayment(totalAmount) {
  try {
    const res = await fetch("/api/create-payment-intent", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ amount: totalAmount })
    });
    const { clientSecret } = await res.json();

    const stripe = Stripe("pk_test_51RcxYTRIZ0vIX0iBUp865uj1lQ1fbchm09qqlixH0rtP35iW1idUEaCHKA0gMs1Bdoyo8HSOePj0cU58bDBzP17S00AakelUCQ");
    const elements = stripe.elements();
    const card = elements.create("card");

    result.innerHTML = `
      <div class="confirm-dialog">
        <h2>${t('enterCardInfo')}</h2>
        <div style="margin: 20px 0;">
          ${t('paymentAmountLabel', {amount: totalAmount.toLocaleString()})}
        </div>
        <div id="payment-form" style="background: white; padding: 20px; border-radius: 10px; margin: 20px 0;"></div>
        <button id="pay-button" class="success-btn">${t('payButton')}</button>
      </div>
    `;

    card.mount("#payment-form");

    document.getElementById('pay-button').onclick = async () => {
      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: { card: card },
      });

      if (error) throw error;

      result.innerHTML = `
        <div class="order-complete">
          <h2>${t('cardPaymentComplete')}</h2>
          <div style="font-size: 1.2rem; margin: 15px 0;">
            ${t('paymentAmount', {amount: totalAmount.toLocaleString()})}
          </div>
          <div style="font-size: 1rem; opacity: 0.8;">
            ${t('autoReset')}
          </div>
        </div>
      `;

      await fetch(`/api/cart/${sessionId}`, { method: 'DELETE' });

      setTimeout(() => {
        cart = [];
        loadRestaurants();
        result.innerHTML = "";
        updateCartUI();
      }, 10000);
    };
  } catch (e) {
    console.error("Stripe Í≤∞Ï†ú Ïò§Î•ò:", e);
    result.innerHTML = `<div class="status-message error-message">‚ùå ${currentLanguage === 'ko' ? 'Í≤∞Ï†ú Ïã§Ìå®' : 'Payment failed'}: ${e.message}</div>`;
  }
}

// ‚úÖ displayOrderResult Ìï®ÏàòÏóêÏÑú Ï§ëÎ≥µ Î∞©ÏßÄ Ï°∞Í±¥ Ï∂îÍ∞ÄÎê®
function displayOrderResult(data) {
  const menuId = reverseClassIndices[data.menu];
  if (typeof menuId === 'undefined') {
    console.error("‚ùå menuIdÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:", data.menu);
    return;
  }

  // ‚úÖ Ï§ëÎ≥µ Î∞©ÏßÄÎ•º ÏúÑÌï¥ Ïù¥ÎØ∏ Ïû•Î∞îÍµ¨ÎãàÏóê ÏûàÎäîÏßÄ ÌôïÏù∏
  const isAlreadyInCart = cart.some(item =>
  item.restaurant === data.restaurant &&
  item.menu === data.menu &&
  item.menuId === reverseClassIndices[data.menu]
);



  fetch("/api/cart", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      sessionId,
      restaurant: data.restaurant,
      menuId
    }),
  }).then(() => {
    updateCartUI();
  }).catch((e) => {
    console.error("ÏûêÎèô Ïû•Î∞îÍµ¨Îãà Ï†ÄÏû• Ïã§Ìå®:", e);
  });

  result.innerHTML = `
    <div class="order-complete">
      <h2>${t('orderComplete')}</h2>
      <div style="font-size: 1.4rem; margin: 15px 0;">
        <strong>üè™ ${data.restaurant}</strong>
      </div>
      <div style="font-size: 1.6rem; margin: 15px 0;">
        <strong>üçΩÔ∏è ${data.menu}</strong>
      </div>
      <div class="price-tag">
        üí∞ ${data.price?.toLocaleString()}${currentLanguage === 'ko' ? 'Ïõê' : ''}
      </div>
      ${data.imageUrl ? `
        <img src="${data.imageUrl}" alt="${data.menu}" style="width:200px; border-radius:15px; margin-top:20px;" />
      ` : ''}
      <div class="button-group" style="margin-top: 25px;">
        <button class="info-btn" onclick="loadRestaurants(); result.innerHTML='';">
          ${t('home')}
        </button>
        <button onclick="loadMenus('${data.restaurant}')">
          ${t('orderMore')}
        </button>
      </div>
    </div>
  `;
}


// ‚úÖ Ï£ºÎ¨∏ Í≤∞Í≥º ÏàòÏã† WebSocket (paste.txtÏóê ÎàÑÎùΩÎê®)
try {
 const ws = new WebSocket("ws://localhost:3001");
 
 ws.onopen = () => {
   console.log("‚úÖ WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ");
 };
 
 ws.onerror = (err) => {
   console.error("‚ùå WebSocket ÏóêÎü¨:", err);
 };
 
 ws.onclose = () => {
   console.log("üîå WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å");
 };
 
 ws.onmessage = (e) => {
   try {
     const data = JSON.parse(e.data);
     console.log("üì® Î∞õÏùÄ Î©îÏãúÏßÄ:", data);
     displayOrderResult(data);
     updateCartUI();
   } catch (parseError) {
     console.error("Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:", parseError);
     result.innerHTML = `
       <div class="status-message error-message">
         ‚ùå ${currentLanguage === 'ko' ? 'Ï£ºÎ¨∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§' : 'Order processing error occurred'}.
       </div>
     `;
   }
 };
} catch (wsError) {
 console.error("WebSocket Ï¥àÍ∏∞Ìôî Ïò§Î•ò:", wsError);
}

// ‚úÖ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî (paste.txtÏóê ÎàÑÎùΩÎê®)
loadRestaurants();
updateCartUI();